//when i want to check for a status code of a response i use this snippet
pm.test("status is ok", () =>
  //arrow CALLBACK FUNCTION simplifies code
  {
    pm.response.to.have.status(200); //for checking if status is 200 OK
  }
);

//when i want to check JSON response for something EXACTLY i'm looking for, i'm parsing json and i use pm.EXPECT:

pm.test("string check", () => {
  const response = pm.response.json();
  pm.expect(response.path).to.eql("something"); //string
  //or
  pm.expect(response.path).to.eql(20); //number
  //or
  pm.expect(response.path).to.be.true; //(or false) boolean

  //but when i want only to be some type, but not exactly something i can use this:

  pm.expect(response.path).to.be.a("string"); //for string
  //or
  pm.expect(response.path).to.be.a("number"); //for number

  //or check an entire array if it is an object

  pm.expect([response]).to.be.an("object");
});

//if i'm using something (like pm.response.json()) in more than one test, i can make it a global variable

const response1 = pm.response.json();

//i can have response which have 'quotes' within a 'quotes' like 'is 'banana' a banana?'. in this case i can do this

pm.expect(response.path).to.eql("is 'banana' a banana?");

//or just use double quotes

pm.expect(response.path).to.eql("is 'banana' a banana?");

//but when i don't have to have an exactly that string i can use:

pm.expect(response.path).to.have.string("is 'banana'");

//if i want to check the response time i can use 

pm.response.responseTime()
//so if i want to check if response time was below some limit i use:
pm.expect(pm.response.responseTime).to.be.below("value:number")

//If i want to make a variable in script (like eg. in tests) i can use the method for defining variables in scripts

pm.globals.set("variableName", "variableValue"); //for global

pm.collectionVariables.set("variableName", "variableValue"); //for collection

pm.environment.set("variableName", "variableValue"); //for environment

pm.variables.set("variableName", "variableValue"); //for local

//for getting variables i use similar way, but with .get, like:

pm.globals.get("variableName");

//if i have to use dynamic variable, i use .replaceIn, like:

pm.variables.replaceIn("{{$randomFirstName}}");

//i can also delete variable, so - unset. it goes like this:

pm.variables.unset("variableName");

pm.variables.has("variableName"); //check if variable exists in current scope

pm.variables.toObject() /*Return an object containing all variables 
with their values in the current scope. 
Based on the order of precedence, this will contain variables from multiple scopes.*/

pm.variables.clear(); //clears all variables

//i can use it to set variable with data from response like in this code:

const responseforvar = pm.response.json();

pm.globals.set("boardId", responseforvar.id);

//if i want to use variable in json body in double quotes, i use it like this

"language": "{{variableName}}" //yes - with curly brackets, like that

//Tools for parsing the response body

pm.response.json(); //for JSON
xml2json(responseBody); //for XML
cheerio(pm.response.text()); //for HTML
pm.response.text(); //for Plain-text
csv - parse / lib / sync; //for CSV

//IMPORTANT - eql is different than equal
equal //is checking if an object is strictly the same object - STAY AWAY IF POSSIBLE
eql //is checking if object have the same value as an typed object (deep equal)

//if i want to revert an assertion, i can use "not", like:
pm.expect(b).to.not.eql(a); //will output test pass for every value in b except that which is equal to a value
// i can also expect an "empty":
pm.expect([]).to.be.empty //it's the same as pm.expect([].letters).to.eql(0)
pm.expect(null).to.be.null //or null
pm.expect(undefined).to.be.undefined; // or undefined
pm.expect(1, 2, 3).to.include(2);//or include something
pm.expect(a).to.be.oneOf(a, b, c); //or be one of objects
//or in case of a string - to start with something
pm.expect('John Doe').to.match(/^John/);
//also i can check if it's "at.least", "above", "below", "at.most", "within", have "lengthOf"

//to parse header from response, use:
pm.response.headers.get('headerName') //in brackets put name of header

pm.response.to.have.header('headerName') //to test if header exists
pm.expect(pm.response.headers.get('headerName')).to.eql('headerValue') //to test if header have expected value

pm.expect(pm.cookies.has("name")).to.be.true //check if cookie exists

pm.expect(pm.response.cookies.get('cookieName')).to.eql('cookieValue') //check if cookie have expected value

//if i want to make a custom request workflow in a collection runner, i can use:
postman.setNextRequest("requestName"); //or i can put requestId  
//or to stop a workflow i use
postman.setNextRequest(null);
//above command can be placed wherever in the code - in prereq script or in tests, it doesn't really matter

//when i plan to use a json file with data in collection runner, i can use variables which are in the file using iterationData
pm.iterationData.get("value");
//there are also more possibilities with that function: 
pm.iterationData.has("variableName:String") //check whether a variable with the specified name exists in iteration data
pm.iterationData.get("variableName:String") //return a variable with specified name from iteration data
pm.iterationData.toObject() //return an iteration data variables in an object form
pm.iterationData.toJSON() //return an iteration data object to JSON format
pm.iterationData.unset("key:String") //remove the specified variable

//if i want to use a value specified in data file in body, query params or path, i simply use double curly brackets like in a collection variable

//here is an example of code with purpose of running requests in an order specified in data file. the file is called router

postman.setNextRequest(getNextRequest()); //callback function to the function above

function getNextRequest() {
    let routes;
    if (Array.isArray(pm.globals.get("remainingRoutes")) === true) {//checks if an array "remainingRoutes" is created and is an array
        routes = pm.globals.get("remainingRoutes");//if it is, it makes "routes" value 
    } else {
        routes = pm.iterationData.get("routes"); //it's getting the routes variable from data file
    }
    
    const nextRequest = routes.shift(); //removes first element from routes and returns it, so nextRequest have value of first element
    pm.globals.set("remainingRoutes", routes);
    
    if (nextRequest === undefined) {//if nextRequest don't have value, code executes
        pm.globals.clear("remainingRoutes");// clears value of remainingRoutes - its the same to unset (idk why it is used instead of unset ¯\_(ツ)_/¯
        return null; //returns null in a setNextRequest - it stops an execution, runner stops request running.
    }
    
    return nextRequest;
}
// order of running is included in an array of objects with arrays named "routes"
[
  {
      "routes": [
          "Request 1",
          "Request 2",
          "Request 3",
          "Request 4"
      ]
  },
  {
      "routes": [
          "Request 1",
          "Request 3",
          "Request 2",
          "Request 4"
      ]
  },
  {
      "routes": [
          "Request 1",
          "Request 2",
          "Request 4",
          "Request 3"
      ]
  }
]
/*If i need to start not from first request, but from another, i will need to make dummy request with this code, if not,
i can run it from Tests tab in collection*/ 

//when i have some common tests (like status check, header check etc.) i can place them in an anonymous function, or in a variable,
// and call it if i need

let CommonTests = () => {
    pm.test("status code ok", () => {
        pm.response.to.have.status(200);
    })

    pm.test("header ok", () => {
        pm.response.to.have.header("Content-Type");
    })

    pm.test("response time less than 300ms", () =>
    {
        pm.expect(pm.response.responseTime).to.be.below(300);
    })
}

CommonTests()
//and set it to a postman variable
pm.environment.set("commonTests", CommonTests.toString()); //i need to parse it to string to save it
//and use eval() to evaluate string and run it as a script
eval(pm.environment.get("commonTests"))(); //using eval is risky, but i don't know any alternative

//If i want to parse CSV response, i can use PapaLibrary
//here is code block from postman course, i can use it as an example

eval(pm.globals.get("PapaLibrary"));
let Papa = this.Papa

const parserConfig = {
    header: true //to parse the header as well
}

let parsedBody = Papa.parse(responseBody, parserConfig);
console.log(parsedBody) //here i have parsed the response

pm.test("ABC1234 was charged properly", () => {
    for(let invoice of parsedBody.data) {
    console.log(invoice);
    if (invoice.ResHash === "ABC1234") {
        pm.expect(invoice.InvTotal).to.eql("$4,500.00")}
    }
})

pm.globals.unset("PapaLibrary"); //for cleaning up

//if i want to use conditional test with status code i can use 
pm.response.code
//like in 
if (pm.response.code === 200) {
    pm.test("status is ok", () => {
        pm.response.to.have.status(200);
    })
}

